const cartsModel = require("../models/cartsModel.js");

/* C√≥digos de estado HTTP usados:
   200 OK ‚Üí √âxito en la petici√≥n
   201 Created ‚Üí Recurso creado correctamente
   204 No Content ‚Üí √âxito sin contenido devuelto
   400 Bad Request ‚Üí Datos inv√°lidos
   401 Unauthorized ‚Üí Token ausente o inv√°lido
   403 Forbidden ‚Üí Sin permisos
   404 Not Found ‚Üí Recurso no encontrado
   409 Conflict ‚Üí Conflicto (stock, duplicados, etc.)
   500 Internal Server Error ‚Üí Error inesperado
   503 Service Unavailable ‚Üí Servicio no disponible temporalmente
*/

// üõí Obtener carrito del usuario
const getCart = async (req, res) => {
  try {
    const carrito = await cartsModel.obtenerCarrito(req.user.id);
    if (!carrito) return res.status(404).json({ message: "No hay carrito abierto." });
    res.status(200).json(carrito);
  } catch (err) {
    console.error("‚ùå Error en getCart:", err);
    res.status(err.code || 500).json({ error: err.message || "Error al obtener el carrito." });
  }
};

// ‚ûï Agregar producto o servicio al carrito
const addItemCart = async (req, res) => {
  try {
    const { id_carrito, id_producto } = req.body;
    if (!id_carrito || !id_producto)
      return res.status(400).json({ error: "Faltan datos requeridos." });

    const result = await cartsModel.agregarItemCarrito(id_carrito, id_producto);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en addItemCart:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al agregar producto o servicio al carrito.",
    });
  }
};

// ‚ûñ Disminuir cantidad de un √≠tem
const removeItemCart = async (req, res) => {
  try {
    const { id_carrito, id_producto } = req.body;
    if (!id_carrito || !id_producto)
      return res.status(400).json({ error: "Faltan datos requeridos." });

    const result = await cartsModel.disminuirItemCarrito(id_carrito, id_producto);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en removeItemCart:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al disminuir cantidad del carrito.",
    });
  }
};

// ‚ùå Eliminar producto/servicio del carrito
const deleteItemCart = async (req, res) => {
  try {
    const { id_carrito, id_producto } = req.body;
    if (!id_carrito || !id_producto)
      return res.status(400).json({ error: "Faltan datos requeridos." });

    const result = await cartsModel.eliminarProductoDelCarrito(id_carrito, id_producto);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en deleteItemCart:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al eliminar producto o servicio del carrito.",
    });
  }
};

// üí∞ Obtener totales del carrito
const getTotalCart = async (req, res) => {
  try {
    const { id_carrito } = req.body;
    if (!id_carrito)
      return res.status(400).json({ error: "Debe especificar un carrito." });

    const result = await cartsModel.obtenerTotalCarrito(id_carrito);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en getTotalCart:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al calcular el total del carrito.",
    });
  }
};

// ‚úÖ Confirmar carrito (crear pedido)
const checkOutCart = async (req, res) => {
  try {
    const result = await cartsModel.confirmarCarrito(req.user.id);
    res.status(201).json(result);
  } catch (err) {
    console.error("‚ùå Error en checkOutCart:", err);
    res.status(err.code || 500).json({
      error:
        err.message ||
        "Error al confirmar el pedido. Verifica stock o conexi√≥n.",
    });
  }
};

// üì¶ Obtener pedidos del usuario
const getUserOrders = async (req, res) => {
  try {
    const result = await cartsModel.obtenerPedidosUsuario(req.user.id);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en getUserOrders:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al obtener tus pedidos.",
    });
  }
};

// üßæ ADMIN: Actualizar estado de pedido
const admin_updateOrder = async (req, res) => {
  try {
    const { id_pedido, nuevo_estado } = req.body;
    if (!id_pedido || !nuevo_estado)
      return res.status(400).json({ error: "Datos incompletos." });

    const result = await cartsModel.admin_actualizarEstadoPedido(id_pedido, nuevo_estado);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en admin_updateOrder:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al actualizar el estado del pedido.",
    });
  }
};

// üóëÔ∏è ADMIN: Eliminar carrito abierto
const admin_deleteCart = async (req, res) => {
  try {
    const { id } = req.body;
    if (!id)
      return res.status(400).json({ error: "Debe indicar el id del usuario." });

    const result = await cartsModel.admin_borrarCarrito(id);
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en admin_deleteCart:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al eliminar el carrito abierto.",
    });
  }
};

// üìã ADMIN: Listar todos los pedidos
const admin_getAllOrders = async (_req, res) => {
  try {
    const result = await cartsModel.admin_obtenerTodosPedidos();
    res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå Error en admin_getAllOrders:", err);
    res.status(err.code || 500).json({
      error: err.message || "Error al obtener todos los pedidos.",
    });
  }
};

module.exports = {
  getCart,
  addItemCart,
  removeItemCart,
  deleteItemCart,
  getTotalCart,
  checkOutCart,
  getUserOrders,
  admin_updateOrder,
  admin_deleteCart,
  admin_getAllOrders,
};
